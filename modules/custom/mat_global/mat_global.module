<?php
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\user\Entity\User;
use Drupal\paragraphs\Entity\Paragraph;

function mat_global_page_attachments(array &$attachments) {
  if (User::load(\Drupal::currentUser()->id())->hasRole('administrator')) {
    $attachments['#attached']['library'][] = 'mat_global/adminlibrary';
  }
  if (User::load(\Drupal::currentUser()->id())->hasRole('editor')) {
    $attachments['#attached']['library'][] = 'mat_global/editor.role.custom';
  }
}

/* DO NOT DELETE - WE DON'T NEED THIS FOR NOW, BUT IN CASE WE WILL
function mat_global_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'basic_page') { 
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $node_id = \Drupal::routeMatch()->getRawParameter('node');
    if ($node_id) {
      $menu_links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $node_id));
      foreach ($menu_links as $link) {
        $parent_route = $link->getParent();
        if ($parent_route) {
          $connection = \Drupal::database();
          $query = $connection->query("SELECT route_param_key FROM menu_tree WHERE id = '$parent_route'");
          $result = $query->fetchAll();
          $get_result_id = explode('=', $result[0]->route_param_key);
          $parent_node_id = $get_result_id[1];
          if ($parent_node_id != null) {
            $get_node = Node::load($parent_node_id);
            $node_title = $get_node->getTitle();
            $image_url = $get_node->field_parent_background_image->entity->getFileUri();
            if (isset($get_node->field_header_style->value)) {
              $parent_style = $get_node->field_header_style->value;
            } else {
              $parent_style = 'color-none';
            }
            if ($node_id != $parent_node_id) {
              $variables['parent_title'] = $get_node->getTitle();
              $variables['parent_image'] = file_create_url($image_url);
              $variables['parent_style'] = $parent_style;
            }
          }
        }
      }
    }
  }
}
*/

/**
 * Implements hook_paragraphs_widget_actions_alter().
 */
function mat_global_paragraphs_widget_actions_alter(array &$widget_actions, array &$context) {
  if (in_array('editor', \Drupal::currentUser()->getRoles()) && _mat_global_get_bundle_entity_type() === 'landing_page') {
    // Client requirements changed here: all drop-down actions should now be removed if editor role.
    // Exceptions: drop-down buttons that needs to be shown to editor role.
    $exceptions = ['myth_vs_fact', 'pillar_group_item', 'cta_item'];
    if (isset($context['paragraphs_entity']) && $context['paragraphs_entity'] instanceof Paragraph) {
      /* @var \Drupal\paragraphs\Entity\Paragraph $entity */
      $entity = $context['paragraphs_entity'];
      if (!in_array($entity->bundle(), $exceptions))
        $widget_actions['dropdown_actions'] = [];
    }
  }
}

/**
 * Implements hook_paragraphs_multiple_elements_alter().
 */
function mat_global_paragraphs_multiple_elements_alter(&$elements, &$form, &$form_state) {
  // Modifications for 'editor' role and landing_page node type.
  // We want to disable draggable sort interface.
  if (in_array('editor', \Drupal::currentUser()->getRoles()) && _mat_global_get_bundle_entity_type() === 'landing_page') {
    // Remove order column, keep exception buttons
    // Client requirements changed here: all order actions should now be removed if editor role.
    $exceptions = [
      '#theme', '#attached', '#weight', 'add_more_button_myth_vs_fact', 'add_more_button_pillar_group_item', 'add_more_button_cta_item'
    ];
    foreach (\Drupal\Core\Render\Element::children($elements) as $index => $child) {
      // Unset sorting
      // Allow special paragraph sorting: special indicator
      if (isset($elements[$child]['#paragraph_type']) && !in_array($elements[$child]['#paragraph_type'], ['myth_vs_fact', 'pillar_group_item', 'cta_item'])) {
        unset($elements[$index]['_weight']);
      }
    }
    _mat_global_remove_add_more_items($elements, $exceptions);
  }
}

/**
 * Remove defined add more buttons from elements.
 *
 * @param       $elements
 * @param array $exception
 */
function _mat_global_remove_add_more_items(&$elements, array $exception = []) {
  foreach ($elements['add_more'] as $index => $button) {
    if (array_search($index, $exception) === FALSE) {
      unset($elements['add_more'][$index]);
    }
  }
}


/**
 * Function will check current node and form settings and then return landing page.
 *
 * @return array|mixed
 *    Return landing page.
 */
function _mat_global_get_landing_page_from_node() {
  /* @var Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node) {
    $config = \Drupal::config('mat_global.matglobalsettings');
    $data = $config->getRawData();
    $landingPageType = array_keys($data, $node->id());
    $landingPageType = reset($landingPageType);

    return $landingPageType;
  } else {
    // Return something so we know this is new node.
    return 'new_node';
  }
}

/**
 * Implements hook_menu_local_tasks_alter()
 *
 * @param array $data Local tasks render array
 * @param string $route_name
 */
function mat_global_menu_local_tasks_alter(&$data, $route_name) {
  if($route_name == 'block.admin_display') {
      // Hide system themes from "editor" role when user editing block layout
      // which are not defined inside $accessAllowedTheme
      $accessAllowedTheme = ['block.admin_display_theme:mat'];
      if (in_array('editor', \Drupal::currentUser()->getRoles())) {
        $localTabs = isset($data['tabs'][1]) ? $data['tabs'][1] : [];
        foreach ($localTabs as $name => $options) {
          if (!in_array($name, $accessAllowedTheme)) {
            $data['tabs'][1][$name]['#access'] = false;
          }
        }
      }
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *
 * @return mixed
 */
function mat_global_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  /*
   * Add 'uses AJAX' checkbox to menu items.
   */
  if ($entity_type->id() === 'menu_link_content') {
    $fields['menu_uses_ajax'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Use AJAX for sub-pages'))
      ->setDescription(t('[Only use this if you know what you are doing!] Loads this menu item\'s children sub-pages using Ajax (maintains the vertical position and leaves the hero image section intact). Intended for categories under Find Support.'))
      ->setDisplayOptions('form', array('type' => 'string', 'weight' => 0));

    return $fields;
  }
}


/**
 * Helper function: get entity type from bundle route.
 *
 * @param string $bundle Bundle name. Default: node.
 * @return string Entity type or 'undefined'.
 */
function _mat_global_get_bundle_entity_type($bundle = 'node') {
  $entity = \Drupal::routeMatch()->getParameter($bundle);
  $type = 'undefined';
  if ($entity !== null && $entity instanceof Drupal\Core\Entity\ContentEntityBase) {
    $type = $entity->getType();
  }
  return $type;
}

/**
 * Implementation of hook_preprocess_field_multiple_value_form().
 */
function mat_global_preprocess_field_multiple_value_form(&$variables) {
  if (in_array('editor', \Drupal::currentUser()->getRoles()) && _mat_global_get_bundle_entity_type() === 'landing_page') {
    $element = $variables['element'];
    $variables['multiple'] = $element['#cardinality_multiple'];

    if ($variables['multiple']) {
      $table_id = Html::getUniqueId($element['#field_name'] . '_values');
      $order_class = $element['#field_name'] . '-delta-order';
      $header_attributes = new Attribute(['class' => ['label']]);
      if (!empty($element['#required'])) {
        $header_attributes['class'][] = 'js-form-required';
        $header_attributes['class'][] = 'form-required';
      }
      $header = [
        [
          'data' => [
            '#prefix' => '<h4' . $header_attributes . '>',
            '#markup' => $element['#title'],
            '#suffix' => '</h4>',
          ],
          'colspan' => 2,
          'class' => ['field-label'],
        ],
        [
          'data' => [
            '#markup' => t('Order', [], ['context' => 'Sort order']),
          ],
          'class' => ['field-label-order'],
        ]
      ];
      $rows = [];

      // Sort items according to '_weight' (needed when the form comes back after
      // preview or failed validation).
      $items = [];
      $variables['button'] = [];
      foreach (Element::children($element) as $key) {
        if ($key === 'add_more') {
          $variables['button'] = &$element[$key];
        } else {
          $items[] = &$element[$key];
        }
      }
      usort($items, '_field_multiple_value_form_sort_helper');

      // Add the items as table rows.
      foreach ($items as $item) {

        $item['_weight']['#attributes']['class'] = [$order_class];

        // Remove weight form element from item render array so it can be rendered
        // in a separate table column.
        $delta_element = $item['_weight'];
        unset($item['_weight']);

        $cells = [
          ['data' => '', 'class' => ['field-multiple-drag']],
          ['data' => $item],
          ['data' => $delta_element, 'class' => ['delta-order']],
        ];

        // Add additional classes to disable
        $rows[] = [
          'data' => $cells,
          'class' => ['draggable', $element['#field_name']],
        ];
      }

      $variables['table'] = [
        '#type' => 'table',
        '#header' => $header,
        '#rows' => $rows,
        '#attributes' => [
          'id' => $table_id,
          'class' => ['field-multiple-table'],
        ],
        '#tabledrag' => [
          [
            'action' => 'order',
            'relationship' => 'sibling',
            'group' => $order_class,
          ],
        ],
      ];

      if (!empty($element['#description'])) {
        $description_id = $element['#attributes']['aria-describedby'];
        $description_attributes['id'] = $description_id;
        $variables['description']['attributes'] = new Attribute($description_attributes);
        $variables['description']['content'] = $element['#description'];

        // Add the description's id to the table aria attributes.
        $variables['table']['#attributes']['aria-describedby'] = $element['#attributes']['aria-describedby'];
      }
    } else {
      $variables['elements'] = [];
      foreach (Element::children($element) as $key) {
        $variables['elements'][] = $element[$key];
      }
    }
  }
}
