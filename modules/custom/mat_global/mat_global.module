<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Menu\MenuActiveTrailInterface;
use Drupal\Core\Menu\MenuLinkTreeInterface;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Core\Plugin\PluginBase;
use Drupal\Core\Plugin\PluginFormInterface;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\node\Entity\Node;
use Drupal\menu_link_content\Entity\MenuLinkContent;

function mat_global_page_attachments(array &$attachments) {
  if (\Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole('administrator')) {
    $attachments['#attached']['library'][] = 'mat_global/adminlibrary';
  }
}

/* DO NOT DELETE - WE DON'T NEED THIS FOR NOW, BUT IN CASE WE WILL
function mat_global_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'basic_page') { 
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $node_id = \Drupal::routeMatch()->getRawParameter('node');
    if ($node_id) {
      $menu_links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $node_id));
      foreach ($menu_links as $link) {
        $parent_route = $link->getParent();
        if ($parent_route) {
          $connection = \Drupal::database();
          $query = $connection->query("SELECT route_param_key FROM menu_tree WHERE id = '$parent_route'");
          $result = $query->fetchAll();
          $get_result_id = explode('=', $result[0]->route_param_key);
          $parent_node_id = $get_result_id[1];
          if ($parent_node_id != null) {
            $get_node = Node::load($parent_node_id);
            $node_title = $get_node->getTitle();
            $image_url = $get_node->field_parent_background_image->entity->getFileUri();
            if (isset($get_node->field_header_style->value)) {
              $parent_style = $get_node->field_header_style->value;
            } else {
              $parent_style = 'color-none';
            }
            if ($node_id != $parent_node_id) {
              $variables['parent_title'] = $get_node->getTitle();
              $variables['parent_image'] = file_create_url($image_url);
              $variables['parent_style'] = $parent_style;
            }
          }
        }
      }
    }
  }
}
*/

/**
 * Implements hook_paragraphs_widget_actions_alter().
 */
function mat_global_paragraphs_widget_actions_alter(array &$widget_actions, array &$context) {
  if (in_array('editor', \Drupal::currentUser()->getRoles()) && _mat_global_get_bundle_entity_type() === 'landing_page') {
    // Client requirements changed here: all drop-down actions should now be removed if editor role.
    $widget_actions['dropdown_actions'] = [];
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function mat_global_preprocess_field_multiple_value_form(&$variables) {
  if (in_array('editor', \Drupal::currentUser()->getRoles()) && _mat_global_get_bundle_entity_type() === 'landing_page') {
    // Client requirements changed here: all drag actions should now be removed if editor role.
    unset($variables['table']['#tabledrag']);
    unset($variables['table']['#header'][1]);
  }
}

/**
 * Implements hook_paragraphs_multiple_elements_alter().
 */
function mat_global_paragraphs_multiple_elements_alter(&$elements, &$form, &$form_state) {
  if (in_array('editor', \Drupal::currentUser()->getRoles()) && _mat_global_get_bundle_entity_type() === 'landing_page') {
    // Remove order column.
    // Client requirements changed here: all order actions should now be removed if editor role.
    $exceptions = [
      '#theme', '#attached', '#weight',
    ];
    foreach (\Drupal\Core\Render\Element::children($elements) as $index => $child) {
      unset($elements[$index]['_weight']);
    }
    _mat_global_remove_add_more_items($elements, $exceptions);
  }
}

/**
 * Remove defined add more buttons from elements.
 *
 * @param       $elements
 * @param array $exception
 */
function _mat_global_remove_add_more_items(&$elements, array $exception = []) {
  foreach ($elements['add_more'] as $index => $button) {
    if (array_search($index, $exception) === FALSE) {
      unset($elements['add_more'][$index]);
    }
  }
}


/**
 * Function will check current node and form settings and then return landing page.
 *
 * @return array|mixed
 *    Return landing page.
 */
function _mat_global_get_landing_page_from_node() {
  /* @var Node $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node) {
    $config = \Drupal::config('mat_global.matglobalsettings');
    $data = $config->getRawData();
    $landingPageType = array_keys($data, $node->id());
    $landingPageType = reset($landingPageType);

    return $landingPageType;
  } else {
    // Return something so we know this is new node.
    return 'new_node';
  }
}

/**
 * Implements hook_menu_local_tasks_alter()
 *
 * @param array $data Local tasks render array
 * @param string $route_name
 */
function mat_global_menu_local_tasks_alter(&$data, $route_name) {
  if($route_name == 'block.admin_display') {
      // Hide system themes from "editor" role when user editing block layout
      // which are not defined inside $accessAllowedTheme
      $accessAllowedTheme = ['block.admin_display_theme:mat'];
      if (in_array('editor', \Drupal::currentUser()->getRoles())) {
        $localTabs = isset($data['tabs'][1]) ? $data['tabs'][1] : [];
        foreach ($localTabs as $name => $options) {
          if (!in_array($name, $accessAllowedTheme)) {
            $data['tabs'][1][$name]['#access'] = false;
          }
        }
      }
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *
 * @return mixed
 */
function mat_global_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  /*
   * Add 'uses AJAX' checkbox to menu items.
   */
  if ($entity_type->id() === 'menu_link_content') {
    $fields['menu_uses_ajax'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Use AJAX for sub-pages'))
      ->setDescription(t('[Only use this if you know what you are doing!] Loads this menu item\'s children sub-pages using Ajax (maintains the vertical position and leaves the hero image section intact). Intended for categories under Find Support.'))
      ->setDisplayOptions('form', array('type' => 'string', 'weight' => 0));

    return $fields;
  }
}


/**
 * Helper function: get entity type from bundle route.
 *
 * @param string $bundle Bundle name. Default: node.
 * @return string Entity type or 'undefined'.
 */
function _mat_global_get_bundle_entity_type($bundle = 'node') {
  $entity = \Drupal::routeMatch()->getParameter($bundle);
  $type = 'undefined';
  if ($entity !== null && $entity instanceof Drupal\Core\Entity\ContentEntityBase) {
    $type = $entity->getType();
  }
  return $type;
}
